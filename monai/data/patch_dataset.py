# Copyright 2020 MONAI Consortium
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from torch.utils.data import Dataset

from monai.utils.module import export


@export("monai.data")
class PatchDataset(Dataset):
    """
    returns patch from an input image dataset.
    The patches are generated by a user specified callable.
    """

    def __init__(self, dataset, patch_func, samples_per_image=1, transform=None):
        """
        Args:
            dataset (torch dataset): an image dataset to extract patches from.
            patch_func (callable): converts image dataset into a sequence of patches.
            samples_per_image (int): `patch_func` should return a sequence of `samples_per_image` elements.
            transform (callable): transform applied to each patch.
        """

        self.dataset = dataset
        self.patch_func = patch_func
        if samples_per_image <= 0:
            raise ValueError('sampler_per_image must be a positive integer.')
        self.samples_per_image = int(samples_per_image)
        self.transform = transform

    def __len__(self):
        return len(self.dataset) * self.samples_per_image

    def __getitem__(self, index):
        if len(self.dataset) <= 0:
            raise IndexError('input dataset is empty.')

        image_id = int(index / self.samples_per_image)
        patches = self.patch_func(self.dataset[image_id])
        if len(patches) != self.samples_per_image:
            raise RuntimeWarning("`patch_func` doesn't return a sequence of length `samples_per_image`.")

        patch_id = (index - image_id * self.samples_per_image) * (-1 if index < 0 else 1)
        patch = patches[patch_id:patch_id + 1]
        if self.transform is not None:
            return self.transform(patch)
        return patch
